#ifndef __$_iuommanager_$_bl
#define __$_iuommanager_$_bl 
#include<forward_list>
#include<bl/iuom>
#include<bl/uom>
#include<bl/blexception>
#include<iostream>
using namespace std;
namespace inventory
{
namespace business_layer
{
namespace abc
{
class IUnitOfMeasurementManager
{
public:
virtual void addUnitOfMeasurement(IUnitOfMeasurement *unitOfMeasurement) throw(BLException)=0;
virtual void updateUnitOfMeasurement(IUnitOfMeasurement *unitOfMeasurement) throw(BLException)=0;
virtual void removeUnitOfMeasurement(IUnitOfMeasurement *) throw(BLException)=0;
virtual void removeUnitOfMeasurementByTitle(string &title) throw(BLException)=0;
virtual void removeUnitOFMeasurementByCode(int &code) throw(BLException)=0;
virtual IUnitOfMeasurement * getUnitOfMeasurementByCode(int &code) throw(BLException)=0;
virtual IUnitOfMeasurement * getUnitOfMeasurementByTitle(string *title) throw(BLException)=0;
virtual forward_list<abc::IUnitOfMeasurement *> *getAllUnitOfMeasurement() throw(BLException)=0;
virtual int unitOfMeasuremetnCodeExists(int &code) throw(BLException)=0;
virtual int unitOfMeasurementTitleExists(string title) throw(BLException)=0;
virtual int getUnitOfMeasurementCount() throw(BLException)=0;
};
}
}
}
#endif